INSTALL

one day there will be an rpm, but not today.

MANUAL INSTALLATION:

no bobMonitor code needs to run as root, but it has to be able to write to
its spool dir and to /tmp. simplest setup is to make root owned dirs, so here's
that setup...
the cgi-bin shell scripts for cat'ing the XML file and pie images usually runs as the
web server user (eg. 'apache') so that user has to be able to read the data files.

as root:
  # make the data dir - this is where the xml files will be written to:
  mkdir /var/spool/bobMon

  # install cgi-bin scripts:
  cp cgi-bin/* /var/www/cgi-bin/

  # install javascript and html:
  mkdir /var/www/html/bobMon
  cp -r www/* /var/www/html/bobMon/

  # install gifs
  cp -r gif /var/www/html/bobMon/

  # make the directory that the pie images will be written to:
  mkdir /var/www/html/bobMon/pies/

  # optionally ->
  # chown the spool and pie directories to the user you run bobMon as eg.
  chown rjh.rjh /var/spool/bobMon
  chown rjh.rjh /var/www/html/bobMon/pies/

  # unpack the slider zip file into the web dir
  cd /var/www/html/bobMon/
  unzip slider102.zip
  # apply the patch
  patch -p0 < slider.patch
  # go back to installing the rest of bobMon...

  # install the python and shell scripts that make up the server side of bobMon:
  cp sbin/* /usr/sbin/
  mkdir /usr/lib/bobMon
  cp lib/* /usr/lib/bobMon/

the config file setup is a bit trickier:
  mkdir /etc/bobMon
  cp conf/bobMonitorConf.py /etc/bobMon/

  # now setup the config file for your cluster config and your path choices
  #  - see the comments in the conf file.

  # bobMon.py needs to be able to import the config, so link it back to lib
  ln -s /etc/bobMon/bobMonitorConf.py /usr/lib/bobMon/

then check the conf file syntax is accepted, and generate the javascript conf from the
python conf with:
  /usr/lib/bobMon/bobMon.py --config > /var/www/html/bobMon/bobMonitorConf.js

NOTE: every time /etc/bobMon/bobMonitorConf.py is changed, the .js file needs
to be regenerated to match. the checksum code should visibly sulk if you
forget to do this.


TESTING:

test your install by running:
  /usr/lib/bobMon/bobMon.py
which should loop and generate a new
  /var/spool/bobMon/bobData
every 5 to 10s (by default)

it may winge about maui's showq being missing (if you aren't running maui) but
apart from that should not output any warnings or errors.

all being well you should now be able to point a web browser at
  http://your.machine.here/bobMon/
and see bobMon

you can also test it without making data available to the web server by
  /usr/lib/bobMon/bobMon.py debug
in which case copious XML output should fill your terminal

once you are confident that bobMon.py is running ok then kill it, and instead
run:
  /usr/sbin/gatherSysData
which will restart bobMon.py after 30s if it crashes...

the reason for this hackery is that ganglia often presents incomplete
information when clusters or gmond's are restarted, and bobMon.py can't
handle all these cases.
yes, this is lame and bobMon.py should really just use more try/except's
and better syslog'ing - feel free to fix it - contributions welcome! :)

Robin Humble - 2012-01-30
